// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type CompressionProvider struct {
	CompressStub        func(string, []byte) ([]byte, error)
	compressMutex       sync.RWMutex
	compressArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	compressReturns struct {
		result1 []byte
		result2 error
	}
	compressReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	DecompressStub        func(string, []byte) ([]byte, error)
	decompressMutex       sync.RWMutex
	decompressArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	decompressReturns struct {
		result1 []byte
		result2 error
	}
	decompressReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CompressionProvider) Compress(arg1 string, arg2 []byte) ([]byte, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.compressMutex.Lock()
	ret, specificReturn := fake.compressReturnsOnCall[len(fake.compressArgsForCall)]
	fake.compressArgsForCall = append(fake.compressArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	fake.recordInvocation("Compress", []interface{}{arg1, arg2Copy})
	fake.compressMutex.Unlock()
	if fake.CompressStub != nil {
		return fake.CompressStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.compressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CompressionProvider) CompressCallCount() int {
	fake.compressMutex.RLock()
	defer fake.compressMutex.RUnlock()
	return len(fake.compressArgsForCall)
}

func (fake *CompressionProvider) CompressCalls(stub func(string, []byte) ([]byte, error)) {
	fake.compressMutex.Lock()
	defer fake.compressMutex.Unlock()
	fake.CompressStub = stub
}

func (fake *CompressionProvider) CompressArgsForCall(i int) (string, []byte) {
	fake.compressMutex.RLock()
	defer fake.compressMutex.RUnlock()
	argsForCall := fake.compressArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CompressionProvider) CompressReturns(result1 []byte, result2 error) {
	fake.compressMutex.Lock()
	defer fake.compressMutex.Unlock()
	fake.CompressStub = nil
	fake.compressReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CompressionProvider) CompressReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.compressMutex.Lock()
	defer fake.compressMutex.Unlock()
	fake.CompressStub = nil
	if fake.compressReturnsOnCall == nil {
		fake.compressReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.compressReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CompressionProvider) Decompress(arg1 string, arg2 []byte) ([]byte, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.decompressMutex.Lock()
	ret, specificReturn := fake.decompressReturnsOnCall[len(fake.decompressArgsForCall)]
	fake.decompressArgsForCall = append(fake.decompressArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	fake.recordInvocation("Decompress", []interface{}{arg1, arg2Copy})
	fake.decompressMutex.Unlock()
	if fake.DecompressStub != nil {
		return fake.DecompressStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.decompressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CompressionProvider) DecompressCallCount() int {
	fake.decompressMutex.RLock()
	defer fake.decompressMutex.RUnlock()
	return len(fake.decompressArgsForCall)
}

func (fake *CompressionProvider) DecompressCalls(stub func(string, []byte) ([]byte, error)) {
	fake.decompressMutex.Lock()
	defer fake.decompressMutex.Unlock()
	fake.DecompressStub = stub
}

func (fake *CompressionProvider) DecompressArgsForCall(i int) (string, []byte) {
	fake.decompressMutex.RLock()
	defer fake.decompressMutex.RUnlock()
	argsForCall := fake.decompressArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CompressionProvider) DecompressReturns(result1 []byte, result2 error) {
	fake.decompressMutex.Lock()
	defer fake.decompressMutex.Unlock()
	fake.DecompressStub = nil
	fake.decompressReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CompressionProvider) DecompressReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.decompressMutex.Lock()
	defer fake.decompressMutex.Unlock()
	fake.DecompressStub = nil
	if fake.decompressReturnsOnCall == nil {
		fake.decompressReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.decompressReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CompressionProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compressMutex.RLock()
	defer fake.compressMutex.RUnlock()
	fake.decompressMutex.RLock()
	defer fake.decompressMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CompressionProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
