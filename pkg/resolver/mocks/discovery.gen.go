// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type Discovery struct {
	RequestDiscoveryStub        func(string) error
	requestDiscoveryMutex       sync.RWMutex
	requestDiscoveryArgsForCall []struct {
		arg1 string
	}
	requestDiscoveryReturns struct {
		result1 error
	}
	requestDiscoveryReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Discovery) RequestDiscovery(arg1 string) error {
	fake.requestDiscoveryMutex.Lock()
	ret, specificReturn := fake.requestDiscoveryReturnsOnCall[len(fake.requestDiscoveryArgsForCall)]
	fake.requestDiscoveryArgsForCall = append(fake.requestDiscoveryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RequestDiscovery", []interface{}{arg1})
	fake.requestDiscoveryMutex.Unlock()
	if fake.RequestDiscoveryStub != nil {
		return fake.RequestDiscoveryStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.requestDiscoveryReturns
	return fakeReturns.result1
}

func (fake *Discovery) RequestDiscoveryCallCount() int {
	fake.requestDiscoveryMutex.RLock()
	defer fake.requestDiscoveryMutex.RUnlock()
	return len(fake.requestDiscoveryArgsForCall)
}

func (fake *Discovery) RequestDiscoveryCalls(stub func(string) error) {
	fake.requestDiscoveryMutex.Lock()
	defer fake.requestDiscoveryMutex.Unlock()
	fake.RequestDiscoveryStub = stub
}

func (fake *Discovery) RequestDiscoveryArgsForCall(i int) string {
	fake.requestDiscoveryMutex.RLock()
	defer fake.requestDiscoveryMutex.RUnlock()
	argsForCall := fake.requestDiscoveryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Discovery) RequestDiscoveryReturns(result1 error) {
	fake.requestDiscoveryMutex.Lock()
	defer fake.requestDiscoveryMutex.Unlock()
	fake.RequestDiscoveryStub = nil
	fake.requestDiscoveryReturns = struct {
		result1 error
	}{result1}
}

func (fake *Discovery) RequestDiscoveryReturnsOnCall(i int, result1 error) {
	fake.requestDiscoveryMutex.Lock()
	defer fake.requestDiscoveryMutex.Unlock()
	fake.RequestDiscoveryStub = nil
	if fake.requestDiscoveryReturnsOnCall == nil {
		fake.requestDiscoveryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.requestDiscoveryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Discovery) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.requestDiscoveryMutex.RLock()
	defer fake.requestDiscoveryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Discovery) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
